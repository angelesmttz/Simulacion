if(all(pos==origen)){
cuenta<-cuenta+1}
}
datos <- cbind(dimension, cuenta)
resultados<-rbind(resultados,datos)
}
resultados
cuenta
repetir <- 500
duracion <- 200
eucl <-  FALSE
resultados <-  data.frame()
for (dimension in 1:2) {
origen<-rep(0,dimension)
cuenta<-0
for (r in 1:repetir){
pos <- rep(0, dimension)
mayor <- 0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1}
pos[cambiar] <- pos[cambiar] + cambio}
if(all(pos==origen)){
cuenta<-cuenta+1}
}
datos <- cbind(dimension, cuenta)
resultados<-rbind(resultados,datos)
}
resultados
repetir <- 500
duracion <- 200
eucl <-  FALSE
resultados <-  data.frame()
for (replicas in 1:10){
for (dimension in 1:8) {
origen<-rep(0,dimension)
cuenta<-0
for (r in 1:repetir){
pos <- rep(0, dimension)
mayor <- 0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1}
pos[cambiar] <- pos[cambiar] + cambio}
if(all(pos==origen)){
cuenta<-cuenta+1}
}
datos <- cbind(replica, dimension, cuenta)
resultados<-rbind(resultados,datos)
}
}
repetir <- 500
duracion <- 200
eucl <-  FALSE
resultados <-  data.frame()
for (replicas in 1:10){
for (dimension in 1:8) {
origen<-rep(0,dimension)
cuenta<-0
for (r in 1:repetir){
pos <- rep(0, dimension)
mayor <- 0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1}
pos[cambiar] <- pos[cambiar] + cambio}
if(all(pos==origen)){
cuenta<-cuenta+1}
}
datos <- cbind(replicas, dimension, cuenta)
resultados<-rbind(resultados,datos)
}
}
resultados
repetir <- 500
duracion <- 200
eucl <-  FALSE
ciclos<-20
resultados <-  data.frame()
for (replicas in 1:ciclos){
for (dimension in 1:8) {
origen<-rep(0,dimension)
cuenta<-0
for (r in 1:repetir){
pos <- rep(0, dimension)
mayor <- 0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1}
pos[cambiar] <- pos[cambiar] + cambio}
if(all(pos==origen)){
cuenta<-cuenta+1}
}
datos <- cbind(replicas, dimension, cuenta)
resultados<-rbind(resultados,datos)
}
}
colnames(resultados)<-c("Replica","Dimension","Regreso")
resultados$Dimension<-as.factor(resultados$Dimension)
library(ggplot2)
ggplot(data=resultados,aes(Dimension,Regreso))+
geom_boxplot()
ggplot(data=resultados,aes(x=resultados$Dimension,y=resultados$Regreso))+
geom_boxplot()
ggplot(data=resultados,aes(x=resultados$Dimension,y=resultados$Regreso))+
geom_boxplot()+
xlab("Dimensión")+ylab("Regreso al origen")
ggplot(data=resultados,aes(x=resultados$Dimension,y=resultados$Regreso),color="blue")+
geom_boxplot()+
xlab("Dimensión")+ylab("Regreso al origen")
ggplot(data=resultados,aes(x=resultados$Dimension,y=resultados$Regreso))+
geom_boxplot(fill="blue")+
xlab("Dimensión")+ylab("Regreso al origen")
repetir <- 500
duracion <- 200
eucl <-  FALSE
ciclos<-5
resultados <-  data.frame()
for (replicas in 1:ciclos){
for (dimension in 1:8) {
origen<-rep(0,dimension)
regreso<-rep(FALSE,repetir)
for (r in 1:repetir){
pos <- rep(0, dimension)
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1}
pos[cambiar] <- pos[cambiar] + cambio}
if(all(pos==origen)){
regreso[r]<-TRUE}
}
datos <- cbind(replicas, dimension, sum(regreso))
resultados<-rbind(resultados,datos)
}
}
resultados
colnames(resultados)<-c("Replica","Dimension","Regreso")
resultados$Dimension<-as.factor(resultados$Dimension)
library(ggplot2)
ggplot(data=resultados,aes(x=resultados$Dimension,y=resultados$Regreso))+
geom_boxplot(fill="blue")+
xlab("Dimensión")+ylab("Regreso al origen")
repetir <- 500
duracion <- 200
eucl <-  FALSE
ciclos<-20
resultados <-  data.frame()
for (replicas in 1:ciclos){
for (dimension in 1:8) {
origen<-rep(0,dimension)
regreso<-rep(FALSE,repetir)
for (r in 1:repetir){
pos <- rep(0, dimension)
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1}
pos[cambiar] <- pos[cambiar] + cambio}
if(all(pos==origen)){
regreso[r]<-TRUE}
}
datos <- cbind(replicas, dimension, sum(regreso))
resultados<-rbind(resultados,datos)
}
}
repetir <- 300
duracion <- 200
eucl <-  FALSE
ciclos<-20
resultados <-  data.frame()
for (replicas in 1:ciclos){
for (dimension in 1:8) {
origen<-rep(0,dimension)
regreso<-rep(FALSE,repetir)
for (r in 1:repetir){
pos <- rep(0, dimension)
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1}
pos[cambiar] <- pos[cambiar] + cambio}
if(all(pos==origen)){
regreso[r]<-TRUE}
}
datos <- cbind(replicas, dimension, sum(regreso))
resultados<-rbind(resultados,datos)
}
}
colnames(resultados)<-c("Replica","Dimension","Regreso")
resultados$Dimension<-as.factor(resultados$Dimension)
library(ggplot2)
ggplot(data=resultados,aes(x=resultados$Dimension,y=resultados$Regreso))+
geom_boxplot(fill="blue")+
xlab("Dimensión")+ylab("Regreso al origen")
repetir <- 300
duracion <- 200
eucl <-  FALSE
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
clusterExport(cluster, "eucl")
datos <-  data.frame()
for (dimension in 1:8) {
origen<-rep(0,dimension)
regreso<-rep(FALSE,repetir)
clusterExport(cluster, "regreso")
clusterExport(cluster, "dimension")
clusterExport(cluster, "origen")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos <- rep(0, dimension)
mayor <- 0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar] <- pos[cambiar] + cambio
if(all(pos==origen)){
regreso[r]<-TRUE}
}
return(sum(regreso))
})
res<-cbind(dimension,resultado)
datos <- rbind(datos, res)
}
stopCluster(cluster)
datos
regreso
repetir <- 300
duracion <- 200
eucl <-  FALSE
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
clusterExport(cluster, "eucl")
datos <-  data.frame()
for (dimension in 1:8) {
origen<-rep(0,dimension)
regreso<-0
clusterExport(cluster, "regreso")
clusterExport(cluster, "dimension")
clusterExport(cluster, "origen")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos <- rep(0, dimension)
mayor <- 0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar] <- pos[cambiar] + cambio
if(all(pos==origen)){
regreso[r]<-TRUE}
}
return(regreso[r])
})
res<-cbind(dimension,sum(regreso))
datos <- rbind(datos, res)
}
stopCluster(cluster)
datos
repetir <- 300
duracion <- 200
eucl <-  FALSE
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
clusterExport(cluster, "eucl")
datos <-  data.frame()
for (dimension in 1:8) {
origen<-rep(0,dimension)
regreso<-0
clusterExport(cluster, "regreso")
clusterExport(cluster, "dimension")
clusterExport(cluster, "origen")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos <- rep(0, dimension)
mayor <- 0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar] <- pos[cambiar] + cambio
if(all(pos==origen)){
return(regreso[r]<-TRUE)}else{regreso[r]<-FALSE}
}
})
res<-cbind(dimension,sum(regreso))
datos <- rbind(datos, res)
}
stopCluster(cluster)
datos
repetir <- 300
duracion <- 200
eucl <-  FALSE
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
clusterExport(cluster, "eucl")
datos <-  data.frame()
for (dimension in 1:8) {
origen<-rep(0,dimension)
regreso<-rep(FALSE,repetir)
clusterExport(cluster, "regreso")
clusterExport(cluster, "dimension")
clusterExport(cluster, "origen")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos <- rep(0, dimension)
mayor <- 0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar] <- pos[cambiar] + cambio
if(all(pos==origen)){
return(regreso[r]<-TRUE)}else{regreso[r]<-FALSE}
}
})
res<-cbind(dimension,sum(regreso))
datos <- rbind(datos, res)
}
stopCluster(cluster)
datos
setwd("~/GitHub/Simulacion/Simulacion/P12/Codigo")
t.pruebas<-200
var.n<-seq(0.02,0.99,0.19)
var.g<-seq(0.02,0.99,0.19)
var.b<-seq(0.02,0.99,0.19)
resultados<-data.frame()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
for (negro in var.n){
for (gris in var.g){
for (blanco in var.b){
source('~/GitHub/Simulacion/Simulacion/P12/Codigo/P12_T12.R')
proba<-cbind(negro,gris,blanco,acierto)
print(proba)
resultados<-rbind(resultados,proba)
}
}
}
colnames(resultados)<-c("Negro","Gris","Blanco","Acierto")
library(ggplot2)
ggplot(resultados, aes(Blanco, Gris)) +
geom_raster(aes(fill=Acierto)) +
scale_fill_gradient(low="yellow", high="red")
ggsave("Heat_GB.png")
ggplot(resultados, aes(Negro, Gris)) +
geom_raster(aes(fill=Acierto)) +
scale_fill_gradient(low="yellow", high="red")
ggsave("Heat_GN.png")
ggplot(resultados, aes(Negro, Blanco)) +
geom_raster(aes(fill=Acierto)) +
scale_fill_gradient(low="yellow", high="red")
ggsave("Heat_BN.png")
rm(list=ls())
ti<-Sys.time()
binario <- function(d, l) {
b <-  rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
prueba<-function(t){
d <- combinaciones[t]
pixeles <- runif(dim) < modelos[d + 1,] # fila 1 contiene el cero, etc.
correcto <- binario(d, n)
salida <- rep(FALSE, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
salida[i] <- resultado
}
r <- min(decimal(salida, n), k) # todos los no-existentes van al final
if (r==d){return(TRUE)}
}
modelos <- read.csv("digitos.modelo", sep=" ", header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- negro
modelos[modelos=='g'] <- gris
modelos[modelos=='b'] <- blanco
r <- 5
c <- 3
dim <- r * c
tasa <- 0.15
tranqui <- 0.993
tope <- 9
digitos <- 0:tope
k <- length(digitos)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim)
test<-t.pruebas/length(digitos)
combinaciones<-rep(digitos,test)
combinaciones<-sample(combinaciones)
for (t in 1:5000) { # entrenamiento
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,]
correcto <- binario(d, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
if (deseada != resultado) {
ajuste <- tasa * (deseada - resultado)
tasa <- tranqui * tasa
neuronas[i,] <- w + ajuste * pixeles
}
}
}
acierto<-foreach(t=1:t.pruebas,.combine=rbind)%dopar%prueba(t)
acierto<-sum(acierto)/t.pruebas*100
resultados<-data.frame()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
for (replica in 1:10){
for (t.pruebas in seq(300,900,300)){
source('~/GitHub/Simulacion/Simulacion/P12/Codigo/P12.R')
secuencial<-cbind(replica,"Original",t.pruebas,tiempo,acierto)
source('~/GitHub/Simulacion/Simulacion/P12/Codigo/P12_T12.R')
paralelo<-cbind(replica,"Paralelo",t.pruebas,tiempo,acierto)
resultados<-rbind(resultados,secuencial,paralelo)
}
print(replica)
}
stopImplicitCluster()
#save.image(file="Tarea_P12.RData")
#load("~/GitHub/Simulacion/Simulacion/P12/Codigo/Tarea_P12.RData")
colnames(resultados)<-c("Replica","Tipo","Pruebas","Tiempo","Acierto")
resultados$Tiempo<-as.numeric(levels(resultados$Tiempo))[resultados$Tiempo]
resultados$Tipo<-as.factor(resultados$Tipo)
resultados$Pruebas<-as.factor(resultados$Pruebas)
library(ggplot2)
ggplot()+
geom_boxplot(data=resultados,aes(x=Pruebas,y=Tiempo,fill=Tipo))+
ylab("Tiempo(s)")+xlab("Número de pruebas")
ggsave("Variacion_tiempo.png")
resultados<-data.frame()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
negro<-0.995
gris<-0.92
blanco<-0.002
for (replica in 1:10){
for (t.pruebas in seq(300,900,300)){
source('~/GitHub/Simulacion/Simulacion/P12/Codigo/P12.R')
secuencial<-cbind(replica,"Original",t.pruebas,tiempo,acierto)
source('~/GitHub/Simulacion/Simulacion/P12/Codigo/P12_T12.R')
paralelo<-cbind(replica,"Paralelo",t.pruebas,tiempo,acierto)
resultados<-rbind(resultados,secuencial,paralelo)
}
print(replica)
}
stopImplicitCluster()
#save.image(file="Tarea_P12.RData")
#load("~/GitHub/Simulacion/Simulacion/P12/Codigo/Tarea_P12.RData")
colnames(resultados)<-c("Replica","Tipo","Pruebas","Tiempo","Acierto")
resultados$Tiempo<-as.numeric(levels(resultados$Tiempo))[resultados$Tiempo]
resultados$Tipo<-as.factor(resultados$Tipo)
resultados$Pruebas<-as.factor(resultados$Pruebas)
library(ggplot2)
ggplot()+
geom_boxplot(data=resultados,aes(x=Pruebas,y=Tiempo,fill=Tipo))+
ylab("Tiempo(s)")+xlab("Número de pruebas")
ggplot()+
geom_boxplot(data=resultados,aes(x=Pruebas,y=Tiempo,fill=Tipo))+
ylab("Tiempo(s)")+xlab("Número de pruebas")
ggsave("Variacion_tiempo.png")
getwd()
resultados$Acierto<-as.numeric(levels(resultados$Acierto))[resultados$Acierto]
ggplot()+
geom_boxplot(data=resultados,aes(x=Pruebas,y=Acierto,fill=Tipo))+
ylab("Acierto (%)")+xlab("Número de pruebas")
ggplot()+
geom_boxplot(data=resultados,aes(x=Pruebas,y=Acierto,fill=Tipo))+
ylab("Acierto (%)")+xlab("Número de pruebas")
ggsave("Variacion_acierto.png")
save.image(file="Tarea_P12.RData")
test<-t.pruebas/length(digitos)
combinaciones<-rep(digitos,test)
combinaciones<-sample(combinaciones)
