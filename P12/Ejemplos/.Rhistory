}
for (replicas in 1:ciclos){
for (k in seq(5,30,5)){
for (n in seq(100,500,100)){
source('~/GitHub/Simulacion/Simulacion/P11/P11_T11.R')
t.paralel<-cbind("paralelo",replicas, k,n, t)
source('~/GitHub/Simulacion/Simulacion/P11/P11.R')
t.original<-cbind("original",replicas,k,n,t)
resultados<-rbind(resultados,t.paralel,t.original)
}
}
print(replicas)
}
resultados
View(resultados)
View(resultados)
View(t.paralel)
View(t.original)
rm(list=ls())
ciclos<-1
vc <- 4
md <- 3
tc <- 5
graficos<-FALSE
resultados<-data.frame()
pick.one <- function(x) {
if (length(x) == 1) {
return(x)
} else {
return(sample(x, 1))
}
}
poli <- function(maxdeg, varcount, termcount) {
f <- data.frame(variable=integer(), coef=integer(), degree=integer())
for (t in 1:termcount) {
var <- pick.one(1:varcount)
deg <- pick.one(1:maxdeg)
f <-  rbind(f, c(var, runif(1), deg))
}
names(f) <- c("variable", "coef", "degree")
return(f)
}
eval <- function(pol, vars, terms) {
value <- 0.0
for (t in 1:terms) {
term <- pol[t,]
value <-  value + term$coef * vars[term$variable]^term$degree
}
return(value)
}
domin.by <- function(target, challenger, total) {
if (sum(challenger < target) > 0) {
return(FALSE) # hay empeora
} # si no hay empeora, vemos si hay mejora
return(sum(challenger > target) > 0)
}
evaluacion<-function(i){
datos<-double()
for (j in 1:k) { # para todos los objetivos
res <- eval(obj[[j]], sol[i,], tc)
datos<-cbind(datos,res)
}
return(datos)
}
dominios<- function(i){
d <- logical()
for (j in 1:n) {
d <- c(d, domin.by(sign * val[i,], sign * val[j,], k))
}
return(sum(d))
}
for (replicas in 1:ciclos){
for (k in seq(5,40,5)){
for (n in seq(100,500,100)){
source('~/GitHub/Simulacion/Simulacion/P11/P11_T11.R')
t.paralel<-cbind("paralelo",replicas, k,n, t)
source('~/GitHub/Simulacion/Simulacion/P11/P11.R')
t.original<-cbind("original",replicas,k,n,t)
resultados<-rbind(resultados,t.paralel,t.original)
}
}
print(replicas)
}
View(resultados)
resultados
ciclos<-1
md <- 3
tc <- 5
graficos<-FALSE
resultados<-data.frame()
pick.one <- function(x) {
if (length(x) == 1) {
return(x)
} else {
return(sample(x, 1))
}
}
poli <- function(maxdeg, varcount, termcount) {
f <- data.frame(variable=integer(), coef=integer(), degree=integer())
for (t in 1:termcount) {
var <- pick.one(1:varcount)
deg <- pick.one(1:maxdeg)
f <-  rbind(f, c(var, runif(1), deg))
}
names(f) <- c("variable", "coef", "degree")
return(f)
}
eval <- function(pol, vars, terms) {
value <- 0.0
for (t in 1:terms) {
term <- pol[t,]
value <-  value + term$coef * vars[term$variable]^term$degree
}
return(value)
}
domin.by <- function(target, challenger, total) {
if (sum(challenger < target) > 0) {
return(FALSE) # hay empeora
} # si no hay empeora, vemos si hay mejora
return(sum(challenger > target) > 0)
}
evaluacion<-function(j){
datos<-double()
for (i in 1:n) {# para todos los objetivos
res<- eval(obj[[j]], sol[i,], tc)
datos<-rbind(datos,res)
}
return(datos)
}
dominios<- function(i){
d <- logical()
for (j in 1:n) {
d <- c(d, domin.by(sign * val[i,], sign * val[j,], k))
}
return(sum(d))
}
for (replicas in 1:ciclos){
for (vc in 2:5){
for (k in seq(3,15,3)){
for (n in seq(200,1000,200)){
source('~/GitHub/Simulacion/Simulacion/P11/P11_T11.R')
t.paralel<-cbind("paralelo",replicas, k,n, t)
source('~/GitHub/Simulacion/Simulacion/P11/P11.R')
t.original<-cbind("original",replicas,k,n,t)
resultados<-rbind(resultados,t.paralel,t.original)
}
}
}
print(replicas)
}
ciclos<-1
md <- 3
tc <- 5
graficos<-FALSE
resultados<-data.frame()
pick.one <- function(x) {
if (length(x) == 1) {
return(x)
} else {
return(sample(x, 1))
}
}
poli <- function(maxdeg, varcount, termcount) {
f <- data.frame(variable=integer(), coef=integer(), degree=integer())
for (t in 1:termcount) {
var <- pick.one(1:varcount)
deg <- pick.one(1:maxdeg)
f <-  rbind(f, c(var, runif(1), deg))
}
names(f) <- c("variable", "coef", "degree")
return(f)
}
eval <- function(pol, vars, terms) {
value <- 0.0
for (t in 1:terms) {
term <- pol[t,]
value <-  value + term$coef * vars[term$variable]^term$degree
}
return(value)
}
domin.by <- function(target, challenger, total) {
if (sum(challenger < target) > 0) {
return(FALSE) # hay empeora
} # si no hay empeora, vemos si hay mejora
return(sum(challenger > target) > 0)
}
evaluacion<-function(j){
datos<-double()
for (i in 1:n) {# para todos los objetivos
res<- eval(obj[[j]], sol[i,], tc)
datos<-rbind(datos,res)
}
return(datos)
}
dominios<- function(i){
d <- logical()
for (j in 1:n) {
d <- c(d, domin.by(sign * val[i,], sign * val[j,], k))
}
return(sum(d))
}
for (replicas in 1:ciclos){
for (vc in 2:5){
for (k in seq(3,15,3)){
for (n in seq(200,1000,200)){
source('~/GitHub/Simulacion/Simulacion/P11/P11.R')
paralelo<-cbind("original",replicas,vc,k,n,t)
source('~/GitHub/Simulacion/Simulacion/P11/P11_T11.R')
secuencial<-cbind("paralelo",replicas, v, k,n, t)
resultados<-rbind(resultados,paralelo,secuencial)
}
}
}
print(replicas)
}
ciclos<-1
md <- 3
tc <- 5
graficos<-FALSE
resultados<-data.frame()
pick.one <- function(x) {
if (length(x) == 1) {
return(x)
} else {
return(sample(x, 1))
}
}
poli <- function(maxdeg, varcount, termcount) {
f <- data.frame(variable=integer(), coef=integer(), degree=integer())
for (t in 1:termcount) {
var <- pick.one(1:varcount)
deg <- pick.one(1:maxdeg)
f <-  rbind(f, c(var, runif(1), deg))
}
names(f) <- c("variable", "coef", "degree")
return(f)
}
eval <- function(pol, vars, terms) {
value <- 0.0
for (t in 1:terms) {
term <- pol[t,]
value <-  value + term$coef * vars[term$variable]^term$degree
}
return(value)
}
domin.by <- function(target, challenger, total) {
if (sum(challenger < target) > 0) {
return(FALSE) # hay empeora
} # si no hay empeora, vemos si hay mejora
return(sum(challenger > target) > 0)
}
evaluacion<-function(j){
datos<-double()
for (i in 1:n) {# para todos los objetivos
res<- eval(obj[[j]], sol[i,], tc)
datos<-rbind(datos,res)
}
return(datos)
}
dominios<- function(i){
d <- logical()
for (j in 1:n) {
d <- c(d, domin.by(sign * val[i,], sign * val[j,], k))
}
return(sum(d))
}
for (replicas in 1:ciclos){
for (vc in 2:5){
for (k in seq(3,15,3)){
for (n in seq(200,1000,200)){
source('~/GitHub/Simulacion/Simulacion/P11/P11.R')
paralelo<-cbind("original",replicas,vc,k,n,t)
source('~/GitHub/Simulacion/Simulacion/P11/P11_T11.R')
secuencial<-cbind("paralelo",replicas, vc, k,n, t)
resultados<-rbind(resultados,paralelo,secuencial)
}
}
}
print(replicas)
}
resultados
rm(list=ls())
gc()
ciclos<-10
md <- 3
tc <- 5
vc<-4
graficos<-FALSE
resultados<-data.frame()
pick.one <- function(x) {
if (length(x) == 1) {
return(x)
} else {
return(sample(x, 1))
}
}
poli <- function(maxdeg, varcount, termcount) {
f <- data.frame(variable=integer(), coef=integer(), degree=integer())
for (t in 1:termcount) {
var <- pick.one(1:varcount)
deg <- pick.one(1:maxdeg)
f <-  rbind(f, c(var, runif(1), deg))
}
names(f) <- c("variable", "coef", "degree")
return(f)
}
eval <- function(pol, vars, terms) {
value <- 0.0
for (t in 1:terms) {
term <- pol[t,]
value <-  value + term$coef * vars[term$variable]^term$degree
}
return(value)
}
domin.by <- function(target, challenger, total) {
if (sum(challenger < target) > 0) {
return(FALSE) # hay empeora
} # si no hay empeora, vemos si hay mejora
return(sum(challenger > target) > 0)
}
evaluacion<-function(j){
datos<-double()
for (i in 1:n) {# para todos los objetivos
res<- eval(obj[[j]], sol[i,], tc)
datos<-rbind(datos,res)
}
return(datos)
}
dominios<- function(i){
d <- logical()
for (j in 1:n) {
d <- c(d, domin.by(sign * val[i,], sign * val[j,], k))
}
return(sum(d))
}
for (replicas in 1:ciclos){
for (k in seq(3,15,3)){
for (n in seq(200,1000,200)){
source('~/GitHub/Simulacion/Simulacion/P11/P11.R')
paralelo<-cbind("original",replicas,k,n,t)
source('~/GitHub/Simulacion/Simulacion/P11/P11_T11.R')
secuencial<-cbind("paralelo",replicas, k,n, t)
resultados<-rbind(resultados,paralelo,secuencial)
}
}
print(replicas)
}
resultados
setwd("~/GitHub/Simulacion/Simulacion/P12/Ejemplos")
binario <- function(d, l) {
b <-  rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
modelos <- read.csv("digitos.modelo", sep=" ", header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- 0.995
modelos[modelos=='g'] <- 0.92
modelos[modelos=='b'] <- 0.002
r <- 5
c <- 3
dim <- r * c
tasa <- 0.15
tranqui <- 0.99
tope <- 9
digitos <- 0:tope
k <- length(digitos)
contadores <- matrix(rep(0, k*(k+1)), nrow=k, ncol=(k+1))
rownames(contadores) <- 0:tope
colnames(contadores) <- c(0:tope, NA)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim) # perceptrones
for (t in 1:5000) { # entrenamiento
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,]
correcto <- binario(d, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
if (deseada != resultado) {
ajuste <- tasa * (deseada - resultado)
tasa <- tranqui * tasa
neuronas[i,] <- w + ajuste * pixeles
}
}
}
for (t in 1:300) { # prueba
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,] # fila 1 contiene el cero, etc.
correcto <- binario(d, n)
salida <- rep(FALSE, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
salida[i] <- resultado
}
r <- min(decimal(salida, n), k) # todos los no-existentes van al final
contadores[d+1, r+1] <- contadores[d+1, r+1] + 1
}
print(contadores)
neuronas
binario <- function(d, l) {
b <-  rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
modelos <- read.csv("digitos.modelo", sep=" ", header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- 0.995
modelos[modelos=='g'] <- 0.92
modelos[modelos=='b'] <- 0.002
r <- 5
c <- 10
dim <- r * c
tasa <- 0.15
tranqui <- 0.99
tope <- 9
digitos <- 0:tope
k <- length(digitos)
contadores <- matrix(rep(0, k*(k+1)), nrow=k, ncol=(k+1))
rownames(contadores) <- 0:tope
colnames(contadores) <- c(0:tope, NA)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim) # perceptrones
for (t in 1:5000) { # entrenamiento
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,]
correcto <- binario(d, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
if (deseada != resultado) {
ajuste <- tasa * (deseada - resultado)
tasa <- tranqui * tasa
neuronas[i,] <- w + ajuste * pixeles
}
}
}
for (t in 1:300) { # prueba
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,] # fila 1 contiene el cero, etc.
correcto <- binario(d, n)
salida <- rep(FALSE, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
salida[i] <- resultado
}
r <- min(decimal(salida, n), k) # todos los no-existentes van al final
contadores[d+1, r+1] <- contadores[d+1, r+1] + 1
}
print(contadores)
binario <- function(d, l) {
b <-  rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
modelos <- read.csv("digitos.modelo", sep=" ", header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- 0.995
modelos[modelos=='g'] <- 0.92
modelos[modelos=='b'] <- 0.002
r <- 5
c <- 3
dim <- r * c
tasa <- 0.15
tranqui <- 0.99
tope <- 9
digitos <- 0:tope
k <- length(digitos)
contadores <- matrix(rep(0, k*(k+1)), nrow=k, ncol=(k+1))
rownames(contadores) <- 0:tope
colnames(contadores) <- c(0:tope, NA)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim) # perceptrones
neuronas
n
k
