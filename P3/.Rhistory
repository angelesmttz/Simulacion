return(FALSE)
}
}
return(TRUE)
}
desde <- 100
hasta <-  300
original <- desde:hasta
invertido <- hasta:desde
replicas <- 10
suppressMessages(library(doParallel))
resultados<-data.frame()
par(mfrow=c(1,3))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0,0.40),
main=paste("Uso de",t,"nucelo(s)")
)
}
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 100
hasta <-  300
original <- desde:hasta
invertido <- hasta:desde
replicas <- 10
suppressMessages(library(doParallel))
resultados<-data.frame()
par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0,0.40),
main=paste("Uso de",t,"nucelo(s)")
)
}
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 100
hasta <-  300
original <- desde:hasta
invertido <- hasta:desde
replicas <- 10
suppressMessages(library(doParallel))
resultados<-data.frame()
par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0,0.40),
main=paste("Uso de",t,"nucelo(s)")
)
}
stopCluster(cluster)
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 1000
hasta <-  3000
original <- desde:hasta
invertido <- hasta:desde
replicas <- 10
suppressMessages(library(doParallel))
resultados<-data.frame()
par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0,0.50),
main=paste("Uso de",t,"nucelo(s)")
)
}
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 1000
hasta <-  3000
original <- desde:hasta
invertido <- hasta:desde
replicas <- 10
suppressMessages(library(doParallel))
resultados<-data.frame()
par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0,1),
main=paste("Uso de",t,"nucelo(s)")
)
}
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 1000
hasta <-  3000
original <- desde:hasta
invertido <- hasta:desde
replicas <- 10
suppressMessages(library(doParallel))
resultados<-data.frame()
par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0,3),
main=paste("Uso de",t,"nucelo(s)")
)
}
getwd()
setwd("C:/Users/angel/Documents/GitHub/Simulacion/Simulacion/P3")
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 1000
hasta <-  3000
original <- desde:hasta
invertido <- hasta:desde
replicas <- 10
suppressMessages(library(doParallel))
resultados<-data.frame()
comp<-par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(1.5,2.5),
main=paste("Uso de",t,"nucleo(s)")
)
}
png("Cambio_Nucleos")
graphics.off()
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 100
hasta <-  300
original <- desde:hasta
invertido <- hasta:desde
replicas <- 10
suppressMessages(library(doParallel))
resultados<-data.frame()
comp<-par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0,0.5),
main=paste("Uso de",t,"nucleo(s)")
)
}
png("Cambio_Nucleos.png")
graphics.off()
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 100
hasta <-  300
original <- desde:hasta
invertido <- hasta:desde
replicas <- 10
suppressMessages(library(doParallel))
resultados<-data.frame()
comp<-par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0,0.5),
main=paste("Uso de",t,"nucleo(s)")
)
}
png("Cambio_Nucleos.png")
boxplot(comp)
graphics.off()
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 100
hasta <-  300
original <- desde:hasta
invertido <- hasta:desde
replicas <- 10
suppressMessages(library(doParallel))
resultados<-data.frame()
comp<-par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0,0.5),
main=paste("Uso de",t,"nucleo(s)")
)
}
png("Cambio_Nucleos.png")
plot(comp)
graphics.off()
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 100
hasta <-  300
original <- desde:hasta
invertido <- hasta:desde
replicas <- 10
suppressMessages(library(doParallel))
resultados<-data.frame()
comp<-par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0,0.5),
main=paste("Uso de",t,"nucleo(s)")
)
}
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 100
hasta <-  300
original <- desde:hasta
invertido <- hasta:desde
replicas <- 50
suppressMessages(library(doParallel))
resultados<-data.frame()
comp<-par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0,0.5),
main=paste("Uso de",t,"nucleo(s)")
)
}
primo <- function(n) {
if (n == 1 || n == 2) {
return(TRUE)
}
if (n %% 2 == 0) {
return(FALSE)
}
for (i in seq(3, max(3, ceiling(sqrt(n))), 2)) {
if ((n %% i) == 0) {
return(FALSE)
}
}
return(TRUE)
}
desde <- 100
hasta <-  300
original <- desde:hasta
invertido <- hasta:desde
replicas <- 50
suppressMessages(library(doParallel))
resultados<-data.frame()
comp<-par(mfrow=c(1,(detectCores()-1)))
for (t in 1:(detectCores()-1)){
registerDoParallel(makeCluster(t))
ot <-  numeric()
it <-  numeric()
at <-  numeric()
for (r in 1:replicas) {
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
resultados<-rbind(ot,it,at)
boxplot(data.matrix(resultados), use.cols=FALSE,
xlab="Ordanamiento", ylab="Tiempo",ylim=c(0.1,0.5),
main=paste("Uso de",t,"nucleo(s)")
)
}
print(comp)
