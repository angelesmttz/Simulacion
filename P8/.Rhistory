resultados$k<-resultados$k/10000
colnames(resultados)<-c("Tipo","Replica","k","Tiempo")
resultados$Tipo <- as.factor(resultados$Tipo)
resultados$Tiempo<-as.numeric(levels(resultados$Tiempo))[resultados$Tiempo]
resultados$k<-as.numeric(levels(resultados$k))[resultados$k]
resultados[resultados$Tiempo>30,4]<-resultados[resultados$Tiempo>30,4]/60
resultados$k<-resultados$k/10000
View(resultados)
rm(list=ls())
load("C:/Users/angel/Documents/Mis_resultados.Rdata")
library(ggplot2)
colnames(resultados)<-c("Tipo","Replica","k","Tiempo")
resultados$Tipo <- as.factor(resultados$Tipo)
resultados$Tiempo<-as.numeric(levels(resultados$Tiempo))[resultados$Tiempo]
resultados$k<-as.numeric(levels(resultados$k))[resultados$k]
resultados[resultados$Tiempo>30,4]<-resultados[resultados$Tiempo>30,4]/60
resultados$k<-resultados$k/10000
View(resultados)
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
facet_grid(.~k)+
scale_y_continuous(name="Longitud") +
scale_x_continuous(name="Tama単o de cumulos(10^4")
resultados$k <- as.factor(resultados$k)
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
facet_grid(.~k)+
scale_y_continuous(name="Longitud") +
scale_x_continuous(name="Tama単o de cumulos(10^4)")
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
facet_grid(.~k)+
scale_y_continuous(name="Longitud") +
scale_x_discrete(name="Tama単o de cumulos(10^4)")
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Longitud") +
scale_x_discrete(name="Tama単o de cumulos(10^4)")
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Longitud") +
scale_x_discrete(name="Tama\u{00f1}o de cumulos(10^4)")
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Longitud") +
scale_x_discrete(name="Tama\u{00f1}o de c\u{00fa}mulos(10^4)")
x<-parse(text='10^o*4')
x
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Longitud") +
scale_x_discrete(name="Tama\u{00f1}o de c\u{00fa}mulos(parse(text='10^o*4'))
")
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Longitud") +
scale_x_discrete(name="Tama\u{00f1}o de c\u{00fa}mulos(10^4)")
ciclos<-6
k<-125000
resultados<-data.frame()
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replica, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replica, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
ciclos<-6
k<-125000
resultados<-data.frame()
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
View(resultados)
setwd("~/GitHub/Simulacion/Simulacion/P8")
save.image(file="Resultados_Tarea.RData")
View(resultados)
rm(list=ls())
load("C:/Users/angel/Documents/GitHub/Simulacion/Simulacion/P8/Resultados_Tarea.RData")
View(resultados)
library(ggplot2)
colnames(resultados)<-c("Tipo","Replica","k","Tiempo")
resultados$Tipo <- as.factor(resultados$Tipo)
resultados$Tiempo<-as.numeric(levels(resultados$Tiempo))[resultados$Tiempo]
ggplot(data=resultados, aes(x = Tipo, y= Tiempo)) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Tiempo (min)") +
scale_x_discrete(name="Tipo")
ggplot(data=resultados, aes(x = Tipo, y= Tiempo),color=c("blue","red")) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Tiempo (min)") +
scale_x_discrete(name="Tipo")
ggplot(data=resultados, aes(x = Tipo, y= Tiempo),colour=c("blue","red")) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Tiempo (min)") +
scale_x_discrete(name="Tipo")
ggplot(data=resultados, aes(x = Tipo, y= Tiempo)) +
geom_boxplot(position=position_dodge(1),color = "black", fill = "steelblue")+
scale_y_continuous(name="Tiempo (min)") +
scale_x_discrete(name="Tipo")
png("Variacion_paralelo.png")
ggplot(data=resultados, aes(x = Tipo, y= Tiempo)) +
geom_boxplot(position=position_dodge(1),color = "black", fill = "steelblue")+
scale_y_continuous(name="Tiempo (min)") +
scale_x_discrete(name="Tipo")
dev.off()
rm(list=ls())
load("C:/Users/angel/Documents/Mis_resultados.Rdata")
library(ggplot2)
colnames(resultados)<-c("Tipo","Replica","k","Tiempo")
resultados$Tipo <- as.factor(resultados$Tipo)
resultados$Tiempo<-as.numeric(levels(resultados$Tiempo))[resultados$Tiempo]
resultados$k<-as.numeric(levels(resultados$k))[resultados$k]
resultados[resultados$Tiempo>30,4]<-resultados[resultados$Tiempo>30,4]/60
resultados$k<-resultados$k/10000
resultados$k <- as.factor(resultados$k)
png("Variacion_k.png")
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Tiempo (min)") +
scale_x_discrete(name="Tama\u{00f1}o de c\u{00fa}mulos(10^4)")
dev.off()
rm(list=ls())
load("C:/Users/angel/Documents/Mis_resultados.Rdata")
resultados}
resultados
colnames(resultados)<-c("Tipo","Replica","k","Tiempo")
View(resultados)
colnames(resultados)<-c("Tipo","Replica","k","Tiempo")
resultados$Tipo <- as.factor(resultados$Tipo)
resultados$Tiempo<-as.numeric(levels(resultados$Tiempo))[resultados$Tiempo]
resultados$k<-as.numeric(levels(resultados$k))[resultados$k]
resultados[resultados$Tiempo>30,4]<-resultados[resultados$Tiempo>30,4]/60
rm(list=ls())
load("C:/Users/angel/Documents/Mis_resultados.Rdata")
colnames(resultados)<-c("Tipo","Replica","k","Tiempo")
View(resultados)
prueba<-resultados[resultados$k==50000,]
prueba
prueba<-resultados[resultados$k==50000 & resultados$Tipo=="paralelo",]
prueba
prueba.org<-resultados[resultados$k==50000 & resultados$Tipo=="original",]
prueba.org
rm(list=ls())
load("C:/Users/angel/Documents/Mis_resultados.Rdata")
colnames(resultados)<-c("Tipo","Replica","k","Tiempo")
resultados$Tiempo<-as.numeric(levels(resultados$Tiempo))[resultados$Tiempo]
resultados[resultados$Tiempo>30,4]<-resultados[resultados$Tiempo>30,4]/60
prueba.par<-resultados[resultados$k==50000 & resultados$Tipo=="paralelo",]
prueba.org<-resultados[resultados$k==50000 & resultados$Tipo=="original",]
prueba.org
dat.par<-prueba.par$Tiempo
dat.par
dat.org<-prueba.org$Tiempo
dat.org
test<-t.test(dat.org,dar.par)
test<-t.test(dat.org,dat.par)
test
prueba.par<-resultados[resultados$k==200000 & resultados$Tipo=="paralelo",]
prueba.org<-resultados[resultados$k==200000 & resultados$Tipo=="original",]
dat.par<-prueba.par$Tiempo
dat.org<-prueba.org$Tiempo
test<-t.test(dat.org,dat.par)
test
rm(list=ls())
load("C:/Users/angel/Documents/Mis_resultados.Rdata")
colnames(resultados)<-c("Tipo","Replica","k","Tiempo")
resultados$Tiempo<-as.numeric(levels(resultados$Tiempo))[resultados$Tiempo]
resultados[resultados$Tiempo>30,4]<-resultados[resultados$Tiempo>30,4]/60
for (k in seq(50000,200000,50000)){
prueba.par<-resultados[resultados$k==k& resultados$Tipo=="paralelo",]
prueba.org<-resultados[resultados$k==k & resultados$Tipo=="original",]
dat.par<-prueba.par$Tiempo
dat.org<-prueba.org$Tiempo
test<-t.test(dat.org,dat.par)
print(test)
}
View(resultados)
rm(list=ls())
para.romperse<-function (){
cumulos <- integer()
urna <- freq[i,]
if (urna$tam > 1) { # no tiene caso romper si no se puede
cumulos <- c(cumulos, romperse(urna$tam, urna$num))
} else {
cumulos <- c(cumulos, rep(1, urna$num))}
return(cumulos)
}
para.unirse<-function(){
cumulos <- integer()
urna <- freq[i,]
cumulos <- c(cumulos, unirse(urna$tam, urna$num))
return(cumulos)
}
rm(list=ls())
load("C:/Users/angel/Documents/Mis_resultados.Rdata")
library(ggplot2)
colnames(resultados)<-c("Tipo","Replica","k","Tiempo")
resultados$Tipo <- as.factor(resultados$Tipo)
resultados$Tiempo<-as.numeric(levels(resultados$Tiempo))[resultados$Tiempo]
resultados[resultados$Tiempo>30,4]<-resultados[resultados$Tiempo>30,4]/60
resultados$k<-as.numeric(levels(resultados$k))[resultados$k]
resultados$k<-resultados$k/10000
resultados$k <- as.factor(resultados$k)
png("Variacion_k.png")
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Tiempo (min)") +
scale_x_discrete(name="Cantidad de c\u{00fa}mulos(10^4)")
dev.off()
rm(list=ls())
ciclos<-5
resultados<-data.frame()
k=10000
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replica, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replica, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
ciclos<-5
resultados<-data.frame()
k=10000
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
library(ggplot2)
colnames(resultados)<-c("Tipo","Replica","k","Tiempo")
resultados$Tipo <- as.factor(resultados$Tipo)
resultados$Tiempo<-as.numeric(levels(resultados$Tiempo))[resultados$Tiempo]
resultados[resultados$Tiempo>30,4]<-resultados[resultados$Tiempo>30,4]/60
resultados$k<-as.numeric(levels(resultados$k))[resultados$k]
resultados$k<-resultados$k/10000
resultados$k <- as.factor(resultados$k)
View(resultados)
resultados$k<-as.numeric(levels(resultados$k))[resultados$k]
resultados$k<-resultados$k*10000
resultados$k <- as.factor(resultados$k)
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Tiempo (min)") +
scale_x_discrete(name="Cantidad de c\u{00fa}mulos")
png("Variacion_k_se.png")
ggplot(data=resultados, aes(x = k, y= Tiempo,fill = Tipo)) +
geom_boxplot(position=position_dodge(1))+
scale_y_continuous(name="Tiempo (sec)") +
scale_x_discrete(name="Cantidad de c\u{00fa}mulos")
dev.off()
ciclos<-1
resultados<-data.frame()
k=10000
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
ciclos<-1
resultados<-data.frame()
k=10000
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
ciclos<-1
resultados<-data.frame()
k=10000
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
library(testit)
n <- 30*k
graficos<-TRUE
originales <- rnorm(k)
cumulos <- originales - min(originales) + 1
cumulos <- round(n * cumulos / sum(cumulos))
assert(min(cumulos) > 0)
diferencia <- n - sum(cumulos)
if (diferencia > 0) {
for (i in 1:diferencia) {
p <- sample(1:k, 1)
cumulos[p] <- cumulos[p] + 1
}
} else if (diferencia < 0) {
for (i in 1:-diferencia) {
p <- sample(1:k, 1)
if (cumulos[p] > 1) {
cumulos[p] <- cumulos[p] - 1
}
}
}
assert(length(cumulos[cumulos == 0]) == 0) # que no haya vacios
assert(sum(cumulos) == n)
c <- median(cumulos) # tamanio critico de cumulos
d <- sd(cumulos) / 4 # factor arbitrario para suavizar la curva
#FUNCIONES
rotura <- function(x) {
return (1 / (1 + exp((c - x) / d)))
}
union <- function(x) {
return (exp(-x / c))
}
romperse <- function(tam, cuantos) {
romper <- round(rotura(tam) * cuantos) # independientes
resultado <- rep(tam, cuantos - romper) # los demas
if (romper > 0) {
for (cumulo in 1:romper) { # agregar las rotas
t <- 1
if (tam > 2) { # sample no jala con un solo valor
t <- sample(1:(tam-1), 1)
}
resultado <- c(resultado, t, tam - t)
}
}
stopifnot(sum(resultado) == tam * cuantos) # no hubo perdidas
return(resultado)
}
para.romperse<-function (){
cumulos <- integer()
urna <- freq[i,]
if (urna$tam > 1) { # no tiene caso romper si no se puede
cumulos <- c(cumulos, romperse(urna$tam, urna$num))
} else {
cumulos <- c(cumulos, rep(1, urna$num))}
return(cumulos)
}
para.unirse<-function(){
cumulos <- integer()
urna <- freq[i,]
cumulos <- c(cumulos, unirse(urna$tam, urna$num))
return(cumulos)
}
unirse <- function(tam, cuantos) {
unir <- round(union(tam) * cuantos) # independientes
if (unir > 0) {
division <- c(rep(-tam, unir), rep(tam, cuantos - unir))
stopifnot(sum(abs(division)) == tam * cuantos)
return(division)
} else {
return(rep(tam, cuantos))
}
}
para.nt<-function(){
suma <- juntarse[2*i-1] + juntarse[2*i]
return(suma)
}
freq <- as.data.frame(table(cumulos))
names(freq) <- c("tam", "num")
freq$tam <- as.numeric(levels(freq$tam))[freq$tam]
duracion <- 5
digitos <- floor(log(duracion, 10)) + 1
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
png("secuencializado.png")
par(mfrow = c(1, 5))
for (paso in 1:duracion) {
assert(sum(cumulos) == n)
cumulos<-foreach(i=1:dim(freq)[1],.combine=c) %dopar% para.romperse()
assert(sum(cumulos) == n)
assert(length(cumulos[cumulos == 0]) == 0) # que no haya vacios
freq <- as.data.frame(table(cumulos)) # actualizar urnas
names(freq) <- c("tam", "num")
freq$tam <- as.numeric(levels(freq$tam))[freq$tam]
assert(sum(freq$num * freq$tam) == n)
cumulos<-foreach(i=1:dim(freq)[1],.combine=c) %dopar% para.unirse()
assert(sum(abs(cumulos)) == n)
assert(length(cumulos[cumulos == 0]) == 0) # que no haya vacios
juntarse <- -cumulos[cumulos < 0]
mayores <- cumulos[cumulos > 0]
assert(sum(mayores) + sum(juntarse) == n)
nt <- length(juntarse)
if (nt > 0) {
if (nt > 1) {
juntarse <- sample(juntarse)
pares<-foreach(i=1:floor(nt / 2),.combine=c) %dopar% para.nt()
cumulos<-c(mayores,pares)
}
if (nt %% 2 == 1) {
cumulos<-c(pares,mayores,juntarse[nt])
}
}
assert(sum(cumulos) == n)
freq <- as.data.frame(table(cumulos))
names(freq) <- c("tam", "num")
freq$tam <- as.numeric(levels(freq$tam))[freq$tam]
assert(sum(freq$num * freq$tam) == n)
hist(cumulos,
main=paste("Paso", paso, "con ambos fen\u{00f3}menos"), freq=FALSE,
ylim=c(0, 0.12), xlab="Tama\u{00f1}o", ylab="Frecuencia relativa")
}
}graphics.off()
rm(list=ls())
ciclos<-1
resultados<-data.frame()
k=10000
png("distribuciones.png")
par(mfrow = c(5, 2),byrow=TRUE)
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
ciclos<-1
resultados<-data.frame()
k=10000
png("distribuciones.png")
par(mfrow = c(5, 2))
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
rm(list=ls())
ciclos<-1
resultados<-data.frame()
k=10000
png("distribuciones.png")
par(mfrow = c(5, 2))
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
graphics.off()
ciclos<-1
resultados<-data.frame()
k=10000
png("distribuciones.png")
par(mfcol = c(2, 5))
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
graphics.off()
ciclos<-1
resultados<-data.frame()
k=10000
png("distribuciones.png")
par(mfcol = c(2, 5))
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
graphics.off()
ciclos<-1
resultados<-data.frame()
k=10000
png("distribuciones.png")
par(mfcol = c(2, 2))
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
graphics.off()
ciclos<-1
resultados<-data.frame()
k=10000
png("distribuciones.png")
par(mfcol = c(2, 2))
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
graphics.off()
ciclos<-1
resultados<-data.frame()
k=10000
png("distribuciones.png")
par(mfcol = c(2, 2))
for (replicas in 1:ciclos){
source('~/GitHub/Simulacion/Simulacion/P8/Cod_P8_T8.R')
t.paralel<-cbind("paralelo",replicas, k,tiempo)
source('~/GitHub/Simulacion/Simulacion/P8/Original/Cod_P8.R')
t.original<-cbind("original",replicas, k,tiempo)
resultados<-rbind(resultados,t.paralel,t.original)
}
graphics.off()
