cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata/masa.plata)
posiciones<-c(2,3,6)
polimerizacion<-function (){
base<-rep(0,7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<probabilidad){
base[cation]<-1
}
}
return(base)
}
options(digits=2)
resultados<-data.frame()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
for (replicas in 1:1){
for (DS in seq(1,3,1)){
for (probabilidad in seq(0.1,1,0.1)){
grado<-DS
res2<-cbind(grado,"real",probabilidad)
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
grado<-sum(polimero)/moleculas.cmc
res<-cbind(grado,"calculado",probabilidad)
resultados<-rbind(resultados,res,res2)
}
}
print(replicas)
}
stopImplicitCluster()
setwd("~/GitHub/Simulacion/Simulacion/Proyecto")
### Condiciones   ###
concentracion.cmc<-15 *(10**-16) #mg/mL
volumen.cmc<-1 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
temperatura<-90 #Centigrados
tiempo<-24 #horas
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata/masa.plata)
posiciones<-c(2,3,6)
polimerizacion<-function (){
base<-rep(0,7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<probabilidad){
base[cation]<-1
}
}
return(base)
}
resultados<-data.frame()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
for (replicas in 1:1){
for (DS in seq(1,3,1)){
for (probabilidad in seq(0.1,1,0.1)){
grado<-DS
res2<-cbind(grado,"real",probabilidad)
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
grado<-round(sum(polimero)/moleculas.cmc,digits=1)
res<-cbind(grado,"calculado",probabilidad)
resultados<-rbind(resultados,res,res2)
}
}
print(replicas)
}
stopImplicitCluster()
View(resultados)
rm(list=ls())
setwd("~/GitHub/Simulacion/Simulacion/Proyecto")
### Condiciones   ###
concentracion.cmc<-15 *(10**-16) #mg/mL
volumen.cmc<-1 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
temperatura<-90 #Centigrados
tiempo<-24 #horas
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata/masa.plata)
posiciones<-c(2,3,6)
polimerizacion<-function (){
base<-rep(0,7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<probabilidad){
base[cation]<-1
}
}
return(base)
}
resultados<-data.frame()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
for (replicas in 1:10){
for (DS in seq(0.5,3,0.5)){
for (probabilidad in seq(0.5,1,0.5)){
grado<-DS
res2<-cbind(grado,"real",probabilidad)
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
grado<-round(sum(polimero)/moleculas.cmc,digits=1)
res<-cbind(grado,"calculado",probabilidad)
resultados<-rbind(resultados,res,res2)
}
}
print(replicas)
}
rm(list=ls())
setwd("~/GitHub/Simulacion/Simulacion/Proyecto")
### Condiciones   ###
concentracion.cmc<-15 *(10**-16) #mg/mL
volumen.cmc<-1 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
temperatura<-90 #Centigrados
tiempo<-24 #horas
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata/masa.plata)
posiciones<-c(2,3,6)
polimerizacion<-function (){
base<-rep(0,7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<probabilidad){
base[cation]<-1
}
}
return(base)
}
resultados<-data.frame()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
for (replicas in 1:10){
for (DS in seq(0.5,3,0.5)){
for (probabilidad in seq(0.05,1,0.05)){
grado<-DS
res2<-cbind(grado,"real",probabilidad)
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
grado<-round(sum(polimero)/moleculas.cmc,digits=1)
res<-cbind(grado,"calculado",probabilidad)
resultados<-rbind(resultados,res,res2)
}
}
print(replicas)
}
stopImplicitCluster()
save.image("Prbabilidad3.RData")
View(resultados)
colnames(resultados)<-c("DS","Tipo","Probabilidad")
resultados$DS<-as.numeric(levels(resultados$DS))[resultados$DS]
library(ggplot2)
ggplot()+
geom_boxplot(data=resultados, aes(x=factor(Probabilidad), y=DS,fill=Tipo))
library(ggplot2)
ggplot()+
geom_boxplot(data=resultados, aes(x=factor(Probabilidad), y=DS,fill=Tipo))
ggplot()+
geom_boxplot(data=resultados, aes(x=DS, y=Probabilidad,fill=Tipo))
resultados$Probabilidad<-as.numeric(levels(resultados$Probabilidad))[resultados$Probabilidad]
ggplot()+
geom_boxplot(data=resultados, aes(x=DS, y=Probabilidad,fill=Tipo))
ggplot()+
geom_boxplot(data=resultados, aes(x=Tipo, y=Probabilidad,fill=DS))
##### Condiciones ###
concentracion.cmc<-15 *(10**-16) #mg/mL
volumen.cmc<-1 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata/masa.plata)
posiciones<-c(2,3,6)
atomos.plata
moleculas.cmc
##### Condiciones ###
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
reduccion<-10**-16
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc/(mw*reduccion)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata/(masa.plata*reduccion))
posiciones<-c(2,3,6)
##### Condiciones ###
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
reduccion<-10**-16
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc/(mw*reduccion))
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata/(masa.plata*reduccion))
posiciones<-c(2,3,6)
moleculas.cmc
atomos.plata
##### Condiciones ###
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
reduccion<-10**-16
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,6)
moleculas.cmc
atomos.plata
##### Condiciones ###
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
reduccion<-10**-15
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,6)
moleculas.cmc
atomos.plata
polimerizacion<-function (){
base<-rep(0,7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<(DS/3)){
base[cation]<-1
}
}
return(base)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
length(polimero)
##### Condiciones ###
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
reduccion<-10**-16
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,6)
polimerizacion<-function (){
base<-rep(0,7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<(DS/3)){
base[cation]<-1
}
}
return(base)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
stopImplicitCluster()
length(polimero)
sum(polimero)
sum(polimero)/moleculas.cmc
length(polimero)
sum(polimero)/length(polimero)
sum(polimero)/moleculas.cmc
##### Condiciones ###
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
reduccion<-10**-16
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,6)
polimerizacion<-function (){
base<-rep(NA,7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<(DS/3)){
base[cation]<-0
}
}
return(base)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
stopImplicitCluster()
polimero
##### Condiciones ###
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
reduccion<-10**-18
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,6)
polimerizacion<-function (){
base<-rep(NA,7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<(DS/3)){
base[cation]<-0
}
}
return(base)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
stopImplicitCluster()
polimero
length(polimero)
##### Condiciones ###
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
reduccion<-10**-19
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,6)
polimerizacion<-function (){
base<-rep(NA,7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<(DS/3)){
base[cation]<-0
}
}
return(base)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
stopImplicitCluster()
polimero
atomos.plata
##### Condiciones ###
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
reduccion<-10**-18
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,6)
polimerizacion<-function (){
base<-rep(NA,7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<(DS/3)){
base[cation]<-0
}
}
return(base)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
stopImplicitCluster()
length(polimero)
atomos.plata
carboxilos<-table(polimero)
carboxilos
##### Condiciones ###
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
reduccion<-10**-17
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,6)
polimerizacion<-function (){
base<-rep(NA,7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<(DS/3)){
base[cation]<-0
}
}
return(base)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
stopImplicitCluster()
carboxilos<-table(polimero)
carboxilos
atomos.plata
##### Condiciones ###
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-24 #horas
reduccion<-1#10**-17
## Calculos ###
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc  #g
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,6)
atomos.plata
atomos.plata/moleculas.cmc
atomos.plata/moleculas.cmc*100
