breaks=c(0, NA),
labels=c(0, "Pol\u{00ed}mero"))+
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))+
geom_point(data=Ag,aes(x=Ag$x,y=Ag$y),color="darkgoldenrod1",
size=Ag.point)
ggsave("Inicial.png")
#save.image(file="P_C_Listo.RData")
#####Velocidad######
R<- 8.3144598 #(Kg)(m^2)/(s^2)(k)(mol)
T.k<-temperatura+273
mol.plata<- masa.plata*(10^-3)
k<- 1.38 *(10**-23) #J/K
Ag.v<- round(sqrt(3*R*T.k/mol.plata))#m/s
######Union######
radio<-0.05
p<-0.75  ###Hacer funcion a la distancia
Ag$estado<-"F"
poli<-cadenas[cadenas$polimero=="Pol\u{00ed}mero",]
nucleos<-cadenas[cadenas$polimero!="Pol\u{00ed}mero",]
cationes<-dim(nucleos)[1]
nucleos <- data.frame(sapply(nucleos, function(x) as.numeric(as.character(x))))
for (hora in seq(0,tiempo,1)){
for (r in 1:cationes){
for (u in 1:atomos.plata){
if (Ag[u,]$estado=="F"){
dx<-Ag[u,]$x-nucleos[r,]$x
dy<-Ag[u,]$y-nucleos[r,]$y
d<- sqrt(dx^2 + dy^2)
if (d<radio){
# if (runif(1)<p)#{
nucleos[r,]$polimero<-nucleos[r,]$polimero+1
Ag[u,]$estado<-"O"
Ag[u,]$dx<-0
Ag[u,]$dy<-0
#       #}
}else{nucleos[r,]$polimero<-nucleos[r,]$polimero}
}else{nucleos[r,]$polimero<-nucleos[r,]$polimero}
}
}
Ag.free<-Ag[Ag$estado=="F",]
ggplot(data=cadenas,aes(x=cadenas$x,y=cadenas$y))+
geom_point(data=cadenas,aes(x=cadenas$x,y=cadenas$y),color="lightyellow1")+
geom_point(data=nucleos,aes(x=nucleos$x,nucleos$y,color=factor(nucleos$polimero)))
xlab("x")+ylab("y")+
ggtitle(paste("Paso ",hora))+
scale_color_discrete(name="\u{00C1}tomos de\nplata")+
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))+
geom_point(data=Ag.free,aes(x=Ag.free$x,y=Ag.free$y),color="darkgoldenrod1",
size=Ag.point)
ggsave(paste("Paso_",hora,".png"))
Ag$x <- Ag$x + Ag$dx
Ag$y <- Ag$y + Ag$dy
Ag[Ag$x < 0,]$x<-Ag[Ag$x < 0,]$x+max.x
Ag[Ag$x > max.x,]$x<-Ag[Ag$x > max.x,]$x-max.x
Ag[Ag$y < 0,]$y<-Ag[Ag$y < 0,]$y+max.y
Ag[Ag$y > max.y,]$y<-Ag[Ag$y > max.y,]$y-max.y
print(hora)
}
source('~/GitHub/Simulacion/Simulacion/Proyecto/Polimero_carboxilos.R', echo=TRUE)
source('~/GitHub/Simulacion/Simulacion/Proyecto/Polimero_carboxilos.R', echo=TRUE)
#####Condiciones######
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-10 #horas
reduccion<-0.4*(10**-15)
Ag.point<-1
cmc.point<-2
#####Calculos######
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc*(10**-3)  #mg
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,5)
setwd("~/GitHub/Simulacion/Simulacion/Proyecto")
#####Funciones######
polimerizacion<-function (){
base<-rep("Pol\u{00ed}mero",7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<(DS/3)){
base[cation]<-0
}#else{base[cation]<-"H"}
}
return(base)
}
manhattan <- function(p1, p2) {
return(sum(abs(p1 - p2)))
}
#####Librerias#####
suppressMessages(library(doParallel))
library(ggplot2)
registerDoParallel(makeCluster(detectCores() - 1))
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
stopImplicitCluster()
l<-2
cadenas<-as.data.frame(polimero)
cadenas$x<-0
cadenas$y<-0
cadenas[1,]$x<-runif(1,0,l)
cadenas[1,]$y<-runif(1,0,l)
dimension<-2
colocar<-dim(cadenas)[1]
#save.image(file="Polimero.RData")
for (g in 2:colocar){
for (d in 1:dimension){
paso<-l/100
if(runif(1)< 0.5){paso<--paso}
cadenas[g,d+1]<-cadenas[g-1,d+1]+paso
}
print(round(g*100/colocar))
}
# Considerar que el polimero no es lineal si no ciclico
# Considerar la repulsi칩n electroest치tica de los grupos funcionales
cadenas$x<-cadenas$x-min(cadenas$x)
cadenas$y<-cadenas$y-min(cadenas$y)
max.x<-max(cadenas$x)
max.y<-max(cadenas$y)
ggplot(data=cadenas,aes(x=cadenas$x,y=cadenas$y))+
geom_point(aes(color=factor(cadenas$polimero)),shape=20,size=cmc.point)+
xlab("x")+ylab("y")+
ggtitle("Pol\u{00ed}mero en soluci\u{00fa}n")+
scale_color_discrete(name="\u{00C1}tomos de\nplata",
breaks=c(0, "Pol\u{00ed}mero"),
labels=c(0, "Pol\u{00ed}mero"))+
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))
ggsave("Polimero.png")
atomos.plata<-atomos.plata*(10**-2)
Ag<- data.frame(x = runif(atomos.plata,min(cadenas$x),max(cadenas$x)),
y=runif(atomos.plata,min(cadenas$y),max(cadenas$y)),
dx=runif(atomos.plata,-max.x/50,max.x/50),
dy=runif(atomos.plata,-max.y/50,max.y/50))
ggplot(data=cadenas,aes(x=cadenas$x,y=cadenas$y))+
geom_point(aes(color=factor(cadenas$polimero)),shape=20,size=cmc.point)+
xlab("x")+ylab("y")+
ggtitle("Estado inicial")+
scale_color_discrete(name="\u{00C1}tomos de\nplata",
breaks=c(0, NA),
labels=c(0, "Pol\u{00ed}mero"))+
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))+
geom_point(data=Ag,aes(x=Ag$x,y=Ag$y),color="darkgoldenrod1",
size=Ag.point)
ggsave("Inicial.png")
#save.image(file="P_C_Listo.RData")
#####Velocidad######
R<- 8.3144598 #(Kg)(m^2)/(s^2)(k)(mol)
T.k<-temperatura+273
mol.plata<- masa.plata*(10^-3)
k<- 1.38 *(10**-23) #J/K
Ag.v<- round(sqrt(3*R*T.k/mol.plata))#m/s
######Union######
radio<-0.05
p<-0.75  ###Hacer funcion a la distancia
Ag$estado<-"F"
poli<-cadenas[cadenas$polimero=="Pol\u{00ed}mero",]
nucleos<-cadenas[cadenas$polimero!="Pol\u{00ed}mero",]
cationes<-dim(nucleos)[1]
nucleos <- data.frame(sapply(nucleos, function(x) as.numeric(as.character(x))))
for (hora in seq(0,tiempo,1)){
for (r in 1:cationes){
for (u in 1:atomos.plata){
if (Ag[u,]$estado=="F"){
dx<-Ag[u,]$x-nucleos[r,]$x
dy<-Ag[u,]$y-nucleos[r,]$y
d<- sqrt(dx^2 + dy^2)
if (d<radio){
# if (runif(1)<p)#{
nucleos[r,]$polimero<-nucleos[r,]$polimero+1
Ag[u,]$estado<-"O"
Ag[u,]$dx<-0
Ag[u,]$dy<-0
#       #}
}else{nucleos[r,]$polimero<-nucleos[r,]$polimero}
}else{nucleos[r,]$polimero<-nucleos[r,]$polimero}
}
}
Ag.free<-Ag[Ag$estado=="F",]
ggplot(data=cadenas,aes(x=cadenas$x,y=cadenas$y))+
geom_point(data=cadenas,aes(x=cadenas$x,y=cadenas$y),color="lightyellow1")+
geom_point(data=nucleos,aes(x=nucleos$x,nucleos$y,color=factor(nucleos$polimero)))
#xlab("x")+ylab("y")+
ggtitle(paste("Paso ",hora))+
#scale_color_discrete(name="\u{00C1}tomos de\nplata")+
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))+
geom_point(data=Ag.free,aes(x=Ag.free$x,y=Ag.free$y),color="darkgoldenrod1",
size=Ag.point)
ggsave(paste("Paso_",hora,".png"))
Ag$x <- Ag$x + Ag$dx
Ag$y <- Ag$y + Ag$dy
Ag[Ag$x < 0,]$x<-Ag[Ag$x < 0,]$x+max.x
Ag[Ag$x > max.x,]$x<-Ag[Ag$x > max.x,]$x-max.x
Ag[Ag$y < 0,]$y<-Ag[Ag$y < 0,]$y+max.y
Ag[Ag$y > max.y,]$y<-Ag[Ag$y > max.y,]$y-max.y
print(hora)
}
rm(list=ls())
#####Condiciones######
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-10 #horas
reduccion<-0.4*(10**-15)
Ag.point<-1
cmc.point<-2
#####Calculos######
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc*(10**-3)  #mg
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,5)
setwd("~/GitHub/Simulacion/Simulacion/Proyecto")
#####Funciones######
polimerizacion<-function (){
base<-rep("Pol\u{00ed}mero",7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<(DS/3)){
base[cation]<-0
}#else{base[cation]<-"H"}
}
return(base)
}
manhattan <- function(p1, p2) {
return(sum(abs(p1 - p2)))
}
#####Librerias#####
suppressMessages(library(doParallel))
library(ggplot2)
registerDoParallel(makeCluster(detectCores() - 1))
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
stopImplicitCluster()
l<-2
cadenas<-as.data.frame(polimero)
cadenas$x<-0
cadenas$y<-0
cadenas[1,]$x<-runif(1,0,l)
cadenas[1,]$y<-runif(1,0,l)
dimension<-2
colocar<-dim(cadenas)[1]
#save.image(file="Polimero.RData")
for (g in 2:colocar){
for (d in 1:dimension){
paso<-l/100
if(runif(1)< 0.5){paso<--paso}
cadenas[g,d+1]<-cadenas[g-1,d+1]+paso
}
print(round(g*100/colocar))
}
# Considerar que el polimero no es lineal si no ciclico
# Considerar la repulsi칩n electroest치tica de los grupos funcionales
cadenas$x<-cadenas$x-min(cadenas$x)
cadenas$y<-cadenas$y-min(cadenas$y)
max.x<-max(cadenas$x)
max.y<-max(cadenas$y)
ggplot(data=cadenas,aes(x=cadenas$x,y=cadenas$y))+
geom_point(aes(color=factor(cadenas$polimero)),shape=20,size=cmc.point)+
xlab("x")+ylab("y")+
ggtitle("Pol\u{00ed}mero en soluci\u{00fa}n")+
scale_color_discrete(name="\u{00C1}tomos de\nplata",
breaks=c(0, "Pol\u{00ed}mero"),
labels=c(0, "Pol\u{00ed}mero"))+
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))
ggsave("Polimero.png")
atomos.plata<-atomos.plata*(10**-2)
Ag<- data.frame(x = runif(atomos.plata,min(cadenas$x),max(cadenas$x)),
y=runif(atomos.plata,min(cadenas$y),max(cadenas$y)),
dx=runif(atomos.plata,-max.x/50,max.x/50),
dy=runif(atomos.plata,-max.y/50,max.y/50))
ggplot(data=cadenas,aes(x=cadenas$x,y=cadenas$y))+
geom_point(aes(color=factor(cadenas$polimero)),shape=20,size=cmc.point)+
xlab("x")+ylab("y")+
ggtitle("Estado inicial")+
scale_color_discrete(name="\u{00C1}tomos de\nplata",
breaks=c(0, NA),
labels=c(0, "Pol\u{00ed}mero"))+
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))+
geom_point(data=Ag,aes(x=Ag$x,y=Ag$y),color="darkgoldenrod1",
size=Ag.point)
ggsave("Inicial.png")
#save.image(file="P_C_Listo.RData")
#####Velocidad######
R<- 8.3144598 #(Kg)(m^2)/(s^2)(k)(mol)
T.k<-temperatura+273
mol.plata<- masa.plata*(10^-3)
k<- 1.38 *(10**-23) #J/K
Ag.v<- round(sqrt(3*R*T.k/mol.plata))#m/s
######Union######
radio<-0.05
p<-0.75  ###Hacer funcion a la distancia
Ag$estado<-"F"
poli<-cadenas[cadenas$polimero=="Pol\u{00ed}mero",]
nucleos<-cadenas[cadenas$polimero!="Pol\u{00ed}mero",]
cationes<-dim(nucleos)[1]
nucleos <- data.frame(sapply(nucleos, function(x) as.numeric(as.character(x))))
for (hora in seq(0,tiempo,1)){
for (r in 1:cationes){
for (u in 1:atomos.plata){
if (Ag[u,]$estado=="F"){
dx<-Ag[u,]$x-nucleos[r,]$x
dy<-Ag[u,]$y-nucleos[r,]$y
d<- sqrt(dx^2 + dy^2)
if (d<radio){
# if (runif(1)<p)#{
nucleos[r,]$polimero<-nucleos[r,]$polimero+1
Ag[u,]$estado<-"O"
Ag[u,]$dx<-0
Ag[u,]$dy<-0
#       #}
}else{nucleos[r,]$polimero<-nucleos[r,]$polimero}
}else{nucleos[r,]$polimero<-nucleos[r,]$polimero}
}
}
Ag.free<-Ag[Ag$estado=="F",]
ggplot()+
geom_point(data=poli,aes(x=poli$x,y=poli$y),color="lightyellow1")+
geom_point(data=nucleos,aes(x=nucleos$x,nucleos$y,color=factor(nucleos$polimero)))
geom_point(data=Ag.free,aes(x=Ag.free$x,y=Ag.free$y),color="darkgoldenrod1",
size=Ag.point)+
xlab("x")+ylab("y")+
ggtitle(paste("Paso ",hora))+
scale_color_discrete(name="\u{00C1}tomos de\nplata")+
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))
ggsave(paste("Paso_",hora,".png"))
Ag$x <- Ag$x + Ag$dx
Ag$y <- Ag$y + Ag$dy
Ag[Ag$x < 0,]$x<-Ag[Ag$x < 0,]$x+max.x
Ag[Ag$x > max.x,]$x<-Ag[Ag$x > max.x,]$x-max.x
Ag[Ag$y < 0,]$y<-Ag[Ag$y < 0,]$y+max.y
Ag[Ag$y > max.y,]$y<-Ag[Ag$y > max.y,]$y-max.y
print(hora)
}
rm(list=ls())
#####Condiciones######
concentracion.cmc<-15 #mg/mL
volumen.cmc<-20 #mL
contenido.plata<-1 #mg
mw<-250*(10**3) #k(g/mol)
DS=1.2
temperatura<-90 #Centigrados
tiempo<-10 #horas
reduccion<-0.4*(10**-15)
Ag.point<-1
cmc.point<-2
#####Calculos######
avogrado<-6.023*(10**23) #avogrado
cmc<-volumen.cmc*concentracion.cmc*(10**-3)  #mg
moleculas.cmc<- round(avogrado*cmc*reduccion/mw)
plata<-contenido.plata*(10**-3) #gramos
masa.plata<-108 #g/mol
atomos.plata<- round(avogrado*plata*reduccion/masa.plata)
posiciones<-c(2,3,5)
setwd("~/GitHub/Simulacion/Simulacion/Proyecto")
#####Funciones######
polimerizacion<-function (){
base<-rep("Pol\u{00ed}mero",7)
for (j in 1:length(posiciones)){
cation<-posiciones[j]
if (runif(1,0,1)<(DS/3)){
base[cation]<-0
}#else{base[cation]<-"H"}
}
return(base)
}
manhattan <- function(p1, p2) {
return(sum(abs(p1 - p2)))
}
#####Librerias#####
suppressMessages(library(doParallel))
library(ggplot2)
registerDoParallel(makeCluster(detectCores() - 1))
polimero<-foreach(1:moleculas.cmc,.combine=c)%dopar%polimerizacion()
stopImplicitCluster()
l<-2
cadenas<-as.data.frame(polimero)
cadenas$x<-0
cadenas$y<-0
cadenas[1,]$x<-runif(1,0,l)
cadenas[1,]$y<-runif(1,0,l)
dimension<-2
colocar<-dim(cadenas)[1]
#save.image(file="Polimero.RData")
for (g in 2:colocar){
for (d in 1:dimension){
paso<-l/100
if(runif(1)< 0.5){paso<--paso}
cadenas[g,d+1]<-cadenas[g-1,d+1]+paso
}
print(round(g*100/colocar))
}
# Considerar que el polimero no es lineal si no ciclico
# Considerar la repulsi칩n electroest치tica de los grupos funcionales
cadenas$x<-cadenas$x-min(cadenas$x)
cadenas$y<-cadenas$y-min(cadenas$y)
max.x<-max(cadenas$x)
max.y<-max(cadenas$y)
ggplot(data=cadenas,aes(x=cadenas$x,y=cadenas$y))+
geom_point(aes(color=factor(cadenas$polimero)),shape=20,size=cmc.point)+
xlab("x")+ylab("y")+
ggtitle("Pol\u{00ed}mero en soluci\u{00fa}n")+
scale_color_discrete(name="\u{00C1}tomos de\nplata",
breaks=c(0, "Pol\u{00ed}mero"),
labels=c(0, "Pol\u{00ed}mero"))+
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))
ggsave("Polimero.png")
atomos.plata<-atomos.plata*(10**-2)
Ag<- data.frame(x = runif(atomos.plata,min(cadenas$x),max(cadenas$x)),
y=runif(atomos.plata,min(cadenas$y),max(cadenas$y)),
dx=runif(atomos.plata,-max.x/50,max.x/50),
dy=runif(atomos.plata,-max.y/50,max.y/50))
ggplot(data=cadenas,aes(x=cadenas$x,y=cadenas$y))+
geom_point(aes(color=factor(cadenas$polimero)),shape=20,size=cmc.point)+
xlab("x")+ylab("y")+
ggtitle("Estado inicial")+
scale_color_discrete(name="\u{00C1}tomos de\nplata",
breaks=c(0, NA),
labels=c(0, "Pol\u{00ed}mero"))+
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))+
geom_point(data=Ag,aes(x=Ag$x,y=Ag$y),color="darkgoldenrod1",
size=Ag.point)
ggsave("Inicial.png")
#save.image(file="P_C_Listo.RData")
#####Velocidad######
R<- 8.3144598 #(Kg)(m^2)/(s^2)(k)(mol)
T.k<-temperatura+273
mol.plata<- masa.plata*(10^-3)
k<- 1.38 *(10**-23) #J/K
Ag.v<- round(sqrt(3*R*T.k/mol.plata))#m/s
######Union######
radio<-0.05
p<-0.75  ###Hacer funcion a la distancia
Ag$estado<-"F"
poli<-cadenas[cadenas$polimero=="Pol\u{00ed}mero",]
nucleos<-cadenas[cadenas$polimero!="Pol\u{00ed}mero",]
cationes<-dim(nucleos)[1]
nucleos <- data.frame(sapply(nucleos, function(x) as.numeric(as.character(x))))
for (hora in seq(0,tiempo,1)){
for (r in 1:cationes){
for (u in 1:atomos.plata){
if (Ag[u,]$estado=="F"){
dx<-Ag[u,]$x-nucleos[r,]$x
dy<-Ag[u,]$y-nucleos[r,]$y
d<- sqrt(dx^2 + dy^2)
if (d<radio){
# if (runif(1)<p)#{
nucleos[r,]$polimero<-nucleos[r,]$polimero+1
Ag[u,]$estado<-"O"
Ag[u,]$dx<-0
Ag[u,]$dy<-0
#       #}
}else{nucleos[r,]$polimero<-nucleos[r,]$polimero}
}else{nucleos[r,]$polimero<-nucleos[r,]$polimero}
}
}
Ag.free<-Ag[Ag$estado=="F",]
Ag.free <- data.frame(sapply(Ag.free, function(x) as.numeric(as.character(x))))
ggplot()+
geom_point(data=poli,aes(x=poli$x,y=poli$y),color="lightyellow1")+
geom_point(data=nucleos,aes(x=nucleos$x,nucleos$y,color=factor(nucleos$polimero)))
geom_point(data=Ag.free,aes(x=Ag.free$x,y=Ag.free$y),color="darkgoldenrod1",
size=Ag.point)+
xlab("x")+ylab("y")+
ggtitle(paste("Paso ",hora))+
scale_color_discrete(name="\u{00C1}tomos de\nplata")+
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))
ggsave(paste("Paso_",hora,".png"))
Ag$x <- Ag$x + Ag$dx
Ag$y <- Ag$y + Ag$dy
Ag[Ag$x < 0,]$x<-Ag[Ag$x < 0,]$x+max.x
Ag[Ag$x > max.x,]$x<-Ag[Ag$x > max.x,]$x-max.x
Ag[Ag$y < 0,]$y<-Ag[Ag$y < 0,]$y+max.y
Ag[Ag$y > max.y,]$y<-Ag[Ag$y > max.y,]$y-max.y
print(hora)
}
source('~/GitHub/Simulacion/Simulacion/Proyecto/Polimero_carboxilos.R', echo=TRUE)
source('~/GitHub/Simulacion/Simulacion/Proyecto/Polimero_carboxilos.R', echo=TRUE)
source('~/GitHub/Simulacion/Simulacion/Proyecto/Polimero_carboxilos.R', echo=TRUE)
View(Ag.free)
View(Ag)
View(nucleos)
View(poli)
source('~/GitHub/Simulacion/Simulacion/Proyecto/Polimero_carboxilos.R', echo=TRUE)
source('~/GitHub/Simulacion/Simulacion/Proyecto/Polimero_carboxilos.R', echo=TRUE)
traceback()
source('~/GitHub/Simulacion/Simulacion/Proyecto/Polimero_carboxilos.R', echo=TRUE)
source('~/GitHub/Simulacion/Simulacion/Proyecto/Polimero_carboxilos.R', echo=TRUE)
class(af.free$x)
class(ag.free$x)
class(Ag.free$x)
class(Ag.free$y)
class(Ag.free$estado)
source('~/GitHub/Simulacion/Simulacion/Proyecto/Polimero_carboxilos.R', echo=TRUE)
